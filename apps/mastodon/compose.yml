services:
  db:
    # restart: always
    image: postgres:14-alpine
    restart: unless-stopped
    shm_size: 256mb
    # networks:
    #   - internal_network
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'mastodon', '-d', 'mastodon_production']
    volumes:
      - ./postgres14:/var/lib/postgresql/data
    environment:
      - 'POSTGRES_HOST_AUTH_METHOD=trust'
      - 'POSTGRES_USER=mastodon'
      - 'POSTGRES_DB=mastodon_production'

  redis:
    # restart: always
    image: redis:7-alpine
    restart: unless-stopped
    # networks:
    #   - internal_network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
    volumes:
      - ./redis:/data

  web:
    # build: .
    image: ghcr.io/sekai-soft/mastodon:v4.3.8-kt
    # restart: always
    restart: unless-stopped
    # env_file: env
    container_name: mastodon
    env_file:
      - env
      - env-mastodon-shared
    command: bundle exec puma -C config/puma.rb
    # networks:
    #   - external_network
    #   - internal_network
    healthcheck:
      # prettier-ignore
      test: ['CMD-SHELL',"curl -s --noproxy localhost localhost:3000/health | grep -q 'OK' || exit 1"]
    # ports:
    #   - '127.0.0.1:3000:3000'
    depends_on:
      - db
      - redis
    volumes:
      - ./public/system:/mastodon/public/system

  streaming:
    # build: .
    image: ghcr.io/sekai-soft/mastodon-streaming:v4.3.8-kt
    # restart: always
    restart: unless-stopped
    # env_file: env
    env_file:
      - env
      - env-mastodon-shared
    command: node ./streaming/index.js
    # networks:
    #   - external_network
    #   - internal_network
    healthcheck:
      # prettier-ignore
      test: ['CMD-SHELL', "curl -s --noproxy localhost localhost:4000/api/v1/streaming/health | grep -q 'OK' || exit 1"]
    # ports:
    #   - '127.0.0.1:4000:4000'
    depends_on:
      - db
      - redis

  sidekiq:
    # build: .
    image: ghcr.io/sekai-soft/mastodon:v4.3.8-kt
    # restart: always
    restart: unless-stopped
    # env_file: env
    env_file:
      - env
      - env-mastodon-shared
    command: bundle exec sidekiq
    depends_on:
      - db
      - redis
    # networks:
    #   - external_network
    #   - internal_network
    volumes:
      - ./public/system:/mastodon/public/system
    healthcheck:
      test: ['CMD-SHELL', "ps aux | grep '[s]idekiq\ 6' || false"]

  es:
    # restart: always
    restart: unless-stopped
    # image: docker.elastic.co/elasticsearch/elasticsearch:7.17.4
    build:
      context: ./elasticsearch
      dockerfile: Dockerfile
    environment:
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m -Des.enforce.bootstrap.checks=true"
      - "xpack.license.self_generated.type=basic"
      - "xpack.security.enabled=false"
      - "xpack.watcher.enabled=false"
      - "xpack.graph.enabled=false"
      - "xpack.ml.enabled=false"
      - "bootstrap.memory_lock=true"
      - "cluster.name=es-mastodon"
      - "discovery.type=single-node"
      - "thread_pool.write.queue_size=1000"
    # networks:
    #    - external_network
    #    - internal_network
    healthcheck:
       test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
    volumes:
       - ./elasticsearch:/usr/share/elasticsearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    # ports:
    #   - '127.0.0.1:9200:9200'

  cloudflared:
    image: cloudflare/cloudflared
    restart: unless-stopped
    command: tunnel run mastodon
    env_file:
      - env-cloudflared
    labels:
      - com.centurylinklabs.watchtower.enable=true

  cloudflared-streaming:
    image: cloudflare/cloudflared
    restart: unless-stopped
    command: tunnel run mastodon-streaming
    env_file:
      - env-cloudflared-streaming
    labels:
      - com.centurylinklabs.watchtower.enable=true

  db-backup:
    image: ghcr.io/sekai-soft/postgres-backup-s3:15
    restart: unless-stopped
    volumes:
     - ./post-backup.sh:/post.sh
    env_file:
      - env-backup
    environment:
      SCHEDULE: '@daily'
      BACKUP_KEEP_DAYS: 14
      POSTGRES_HOST: db
      POSTGRES_DATABASE: mastodon_production
      POSTGRES_USER: mastodon
      POSTGRES_PASSWORD: doesntmatter

  cleanup:
    build:
      context: ./cleanup
      dockerfile: Dockerfile
    restart: unless-stopped
    volumes:
      - ./post-cleanup.sh:/post.sh
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      SCHEDULE: '@weekly'

# networks:
#   external_network:
#   internal_network:
#     internal: true
